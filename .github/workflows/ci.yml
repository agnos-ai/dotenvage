name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Check code formatting
  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check

  # Run clippy linting
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-clippy-${{ hashFiles('**/Cargo.lock') }}
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Build the project
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.rust }}-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Build
        run: cargo build --release --verbose
      - name: Build documentation
        run: cargo doc --no-deps

  # Run tests
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.rust }}-target-test-${{ hashFiles('**/Cargo.lock') }}
      - name: Run tests
        run: cargo test --verbose
      - name: Run doc tests
        run: cargo test --doc --verbose

  # Detect version changes and prepare for release
  version-check:
    name: Check Version
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      version_changed: ${{ steps.version.outputs.changed }}
      new_version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get current version from Cargo.toml
        id: cargo_version
        run: |
          VERSION=$(grep '^version' Cargo.toml | head -1 | sed 's/.*"\(.*\)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current Cargo.toml version: $VERSION"
      - name: Get latest git tag
        id: latest_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "Latest git tag version: $LATEST_VERSION"
      - name: Compare versions
        id: version
        run: |
          CARGO_VERSION="${{ steps.cargo_version.outputs.version }}"
          TAG_VERSION="${{ steps.latest_tag.outputs.version }}"
          
          if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CARGO_VERSION" >> $GITHUB_OUTPUT
            echo "‚úÖ Version changed: $TAG_VERSION -> $CARGO_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è  Version unchanged: $CARGO_VERSION"
          fi

  # Release: Tag, Changelog, GitHub Release, and Publish
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [fmt, clippy, build, test, version-check]
    if: needs.version-check.outputs.version_changed == 'true'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install Cocogitto
        run: |
          cargo install --locked cocogitto
          cog --version
      
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Generate Changelog
        id: changelog
        run: |
          VERSION="${{ needs.version-check.outputs.new_version }}"
          
          # Generate changelog for this version
          cog changelog --at "v$VERSION" > RELEASE_CHANGELOG.md 2>/dev/null || echo "## Changes\n\nSee commit history for details." > RELEASE_CHANGELOG.md
          
          # Also update full CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Prepend new version to changelog
          {
            head -n 3 CHANGELOG.md
            echo ""
            echo "## v$VERSION - $(date +%Y-%m-%d)"
            echo ""
            cat RELEASE_CHANGELOG.md
            echo ""
            tail -n +4 CHANGELOG.md
          } > CHANGELOG.new.md
          mv CHANGELOG.new.md CHANGELOG.md
          
          echo "Changelog generated for v$VERSION"
          cat RELEASE_CHANGELOG.md
      
      - name: Commit Changelog
        run: |
          git add CHANGELOG.md
          git diff --staged --quiet || git commit -m "chore: update CHANGELOG for v${{ needs.version-check.outputs.new_version }}"
          git push origin main
      
      - name: Create and Push Tag
        run: |
          VERSION="${{ needs.version-check.outputs.new_version }}"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
          echo "‚úÖ Created and pushed tag v$VERSION"
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version-check.outputs.new_version }}
          name: v${{ needs.version-check.outputs.new_version }}
          body_path: RELEASE_CHANGELOG.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: dtolnay/rust-toolchain@stable
      
      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
      
      - name: Release Summary
        run: |
          echo "üéâ Successfully released v${{ needs.version-check.outputs.new_version }}"
          echo "üì¶ Published to crates.io: https://crates.io/crates/dotenvage"
          echo "üìù GitHub Release: https://github.com/agnos-ai/dotenvage/releases/tag/v${{ needs.version-check.outputs.new_version }}"
          echo "üìö Documentation: https://docs.rs/dotenvage/${{ needs.version-check.outputs.new_version }}"
